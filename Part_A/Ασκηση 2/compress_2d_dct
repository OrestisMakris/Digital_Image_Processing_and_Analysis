import numpy as np
import matplotlib.pyplot as plt
import cv2

from scipy.fft import dctn, idctn


def load_image(path):

    """load an image from the specified path and conver grayscale"""
    """to a float64 array with values in the range [0, 1]."""

    img = cv2.imread(path,  cv2.IMREAD_GRAYSCALE)
    return img.astype(np.float64) / 255.0



def dct2(block):

    """Compute the 2d Discrete Cosine Transform of a block."""

    return dctn(block,  type=2, norm="ortho", axes=(0,1))

def idct2(C):

    """Compute the 2d  idc trans coefficients """

    return idctn(C,type=2,norm="ortho",      axes=(0,1))

def get_zonal_mask(N,keep):

    mask = np.zeros((N, N), bool)
    count = 0

    for s in range(2*N - 1):

        for u in range(max(0, s -N+1) , min(N, s+1)):

            v = s  - u

            if 0 <= u < N and  0 <= v < N:

                if count < keep:

                    mask[u,v] = True
                    count += 1

                else:

                    return mask
                
    return mask

def get_thresh_mask(C, keep_ratio):


    flat_abs_C = np.abs(C).ravel()
    num_coeffs_to_kep = int(np.ceil(keep_ratio * flat_abs_C.size))

    if num_coeffs_to_kep>=flat_abs_C.size :

        thresh=0

    else:

        idx_thresh = flat_abs_C.size - num_coeffs_to_kep

        thresh = np.partition(flat_abs_C, idx_thresh)[idx_thresh]

    return np.abs(C) >= thresh


def mse(a, b):

    """Calculate the Mser betwen 2images  
    Args:"""

    return np.mean((a - b)**2)


def compress_image(img, blocksize, mask_ty, r_percent):

    H, W = img.shape

    out = np.zeros_like(img)

    n_by = H // blocksize

    n_bxx = W //     blocksize

    for by in range(n_by):

        for bx in range(n_bxx):

            y00 = by *  blocksize
            x0 = bx *  blocksize

            block = img[y00:y00+blocksize, x0:x0+blocksize]

            C = dct2(block)
#zoni
            if mask_ty == 'zonal':

                blocksizeee2= blocksize * blocksize
                keep_count_zonal = np.round((r_percent/100.0) * blocksizeee2 )

                keep_count_zonal = int(keep_count_zonal)

                current_mask = get_zonal_mask(blocksize, keep_count_zonal)
#   katofli
            elif mask_ty == 'threshold':

                keep_ratio_thresh = r_percent /     100.0

                current_mask = get_thresh_mask(C, keep_ratio_thresh)
    
            C_mas = C * current_mask

            rec = idct2(C_mas)
            

            out[y00:y00 + blocksize, x0:x0  + blocksize] = rec

    return out


def main():

    img_path = 'board.png'
    img = load_image(img_path)

    b_s = 32 #32 x  32 block ize
    
    R__values = np.arange(5,  51,  5)

    mse_zon = []
    mse_thre = []

    img_h_proces = (img.shape[0] // b_s) * b_s
    img_w_proces = (img.shape[1] // b_s) * b_s
    img_cropped = img[:img_h_proces, :img_w_proces]

    for r_percent in R__values:

        rec_z = compress_image(img, b_s, 'zonal', r_percent)

        mse_zon.append(mse(img_cropped, rec_z[:img_h_proces,:img_w_proces]))

        rec_t = compress_image(img, b_s, 'threshold', r_percent)

        msee = mse(img_cropped, rec_t[:img_h_proces,:img_w_proces])
        
        mse_thre.append(msee)


    plt.figure(figsize=(12, 7))

    plt.plot(R__values, mse_zon, 
                
             marker='o', label='Zonal masking' ,color='darkcyan')
    
    plt.plot(R__values, mse_thre, marker='s', label='Thrshold masking ' , color='darkred')

    plt.xlabel('Percentage of coefficients kept (r %')
    plt.ylabel('MSE')
    plt.title(f'2d Compresion MSE block size: {b_s} * {b_s} on  "{img_path}"')
    plt.legend()
    plt.grid(True)
    plt.xticks(R__values)
    plt.show()



if __name__ == '__main__':


    main()